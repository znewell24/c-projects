/***********************************************************************
* Header:
*    Hash
* Summary:
*    This is the notion of a hash. 
*
* Author
*     Zach Newell
************************************************************************/

#ifndef Hash_H
#define Hash_H
#include <list>
#include <algorithm>
#include <cassert>
using namespace std;

/************************************************
 * Hash
 * A class that holds stuff
 ***********************************************/
template <class T>
class Hash
{
public:
   // copy constructor : copy it
   Hash(const Hash & rhs) throw (const char *);
   
   // non-default constructor : pre-allocate
   Hash(int capacity) throw (const char *);
   
   // destructor : free everything
   ~Hash() { if (cap) delete [] data; }

   // assignment operator overload
   Hash<T> & operator= (const Hash & rhs) throw (const char *);
   
   // is the Hash currently empty
   bool empty() const { return numItems == 0; }

   // how many items are currently in the Hash?
   int size() const { return numItems; }

   //capacity returns the number of buckets in the Hash
   int capacity() const { return cap; }

   // remove all the items from the Hash
   void clear();
   
   // find an element in the hash
   bool find(const T & t);

   // add an item to the Hash
   void insert(const T & t);
  
   // pure virtual method representing the hash for each child
   virtual int hash(const T & t) const = 0;

   //public data
   list<T>* data;          // dynamically allocated array of T
   int numItems;      // how many items are currently in the Hash?
   int cap;           // how many items can I put on the Hash before full?
};

/*******************************************
 * Hash :: COPY CONSTRUCTOR
 *******************************************/
template <class T>
Hash <T> :: Hash(const Hash <T> & rhs) throw (const char *)
{
	try
	{
		cap = rhs.capacity();
		numItems = rhs.size();
		data = new list<T>[cap];
		for (int i = 0; i < cap; i++)
		{
			typename list<T>::iterator it;
			for (it = rhs.data[i].begin(); it != rhs.data[i].end(); it++)
			{
				data[i].push_back(*it);
			}
		}
	}
	catch (std::bad_alloc)
	{
		throw "ERROR: unable to allocate memory for the hash.";
	}
}

/**********************************************
 * Hash : NON-DEFAULT CONSTRUCTOR
 * Preallocate the Hash to "capacity"
 **********************************************/
template <class T>
Hash <T> :: Hash(int capacity) throw (const char *)
{
	try
	{
		numItems = 0;
		cap = capacity;
		data = new list<T>[cap];
	}
	catch (std::bad_alloc)
	{
		throw "ERROR: Unable to allocate memory for the hash.";
	}
}

/***************************************************
* Hash :: assignment operator
* assign the rhs to the current.
**************************************************/
template <class T>
Hash<T> & Hash<T>::operator= (const Hash & rhs) throw (const char *)
{
	try
	{
		cap = rhs.capacity();
		numItems = rhs.size();
		data = new list<T>[cap];
		for (int i = 0; i < cap; i++)
		{
			typename list<T>::iterator it;
			for (it = rhs.data[i].begin(); it != rhs.data[i].end(); it++)
			{
				data[i].push_back(*it);
			}
		}
	}
	catch (std::bad_alloc)
	{
		throw "ERROR: unable to allocate memory for the hash.";
	}
}

/***************************************************
* Hash :: FIND
* find an item in the hash, returns a bool
**************************************************/
template <class T>
bool Hash<T>::find(const T & t)
{
	bool temp = false;
	int i = hash(t);
	
	typename list<T>::iterator it;
	for (it = data[i].begin(); it != data[i].end(); it++)
	{
		if (*it == t)
		{
			temp = true;
		}
	}

	//without the hash function which does one more loop than its suppose to
	/*for (int i = 0; i < capacity(); i++)
	{
		for (typename list<T>::iterator it = data[i].begin(); it != data[i].end(); it++)
		{
			if (*it == t)
			{
				temp = true;
			}
		}
	}*/
	return temp;
}

/***************************************************
* Hash :: Clear
* clear the lists
**************************************************/
template <class T>
void Hash<T>::clear()
{
	for (int i = 0; i < capacity(); i++)
	{
		data[i].clear();
	}
	numItems = 0;
	cap = 0;
}

/***************************************************
 * Hash :: INSERT
 * Insert an item on the end of the Hash
 **************************************************/
template <class T>
void Hash <T> :: insert(const T & t)
{
	int i = hash(t);
	data[i].push_back(t);
	numItems++;
}


#endif // Hash_H

